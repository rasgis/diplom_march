import React, { useEffect, useState } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useAppDispatch, useAppSelector } from "../../../hooks/redux";
import {
  updateProduct,
  fetchProductById,
} from "../../../reducers/productSlice";
import { fetchCategories } from "../../../reducers/categorySlice";
import { Product } from "../../../types/product";
import { Category } from "../../../types/category";
import ImageUpload from "../../../components/ImageUpload/ImageUpload";
import { fileService } from "../../../services/fileService";
import { categoryService } from "../../../services/categoryService";
import styles from "./Admin.module.css";

const ProductEdit: React.FC = () => {
  const dispatch = useAppDispatch();
  const navigate = useNavigate();
  const { id } = useParams<{ id: string }>();
  const { selectedProduct, loading: productLoading } = useAppSelector(
    (state) => state.products
  );
  const { items: categories } = useAppSelector((state) => state.categories);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [imageFile, setImageFile] = useState<File | null>(null);
  const [imagePath, setImagePath] = useState<string | undefined>(undefined);

  const [formData, setFormData] = useState<Partial<Product>>({
    name: "",
    description: "",
    price: 0,
    category: "",
    image: "",
    unitOfMeasure: "—à—Ç",
  });

  useEffect(() => {
    if (id) {
      dispatch(fetchProductById(id));
    }
    dispatch(fetchCategories());
  }, [dispatch, id]);

  useEffect(() => {
    if (selectedProduct) {
      console.log("Loading product data:", selectedProduct);
      console.log("Category value:", selectedProduct.category);

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ category –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª–µ–º _id –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–æ–π
      let categoryValue = selectedProduct.category;
      if (
        typeof selectedProduct.category === "object" &&
        selectedProduct.category !== null
      ) {
        // –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ–±—ä–µ–∫—Ç–∞ —Å –∫–ª—é—á–æ–º _id
        categoryValue = (selectedProduct.category as { _id: string })._id;
      }

      console.log("Using category value:", categoryValue);

      setFormData({
        name: selectedProduct.name,
        description: selectedProduct.description,
        price: selectedProduct.price,
        category: categoryValue,
        image: selectedProduct.image,
        unitOfMeasure: selectedProduct.unitOfMeasure || "—à—Ç",
      });
      setImagePath(selectedProduct.image);
    }
  }, [selectedProduct]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!id) return;

    setIsLoading(true);
    setError(null);

    try {
      let finalImagePath = imagePath || "";

      if (imageFile) {
        console.log("Uploading image:", imageFile);
        finalImagePath = await fileService.saveImage(imageFile);
        console.log("Image uploaded successfully:", finalImagePath);
      }

      const productData = {
        ...formData,
        image: finalImagePath,
      };

      await dispatch(updateProduct({ id, product: productData })).unwrap();
      navigate("/admin/products");
    } catch (error) {
      console.error("Error updating product:", error);
      setError(
        error instanceof Error
          ? error.message
          : "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–≤–∞—Ä–∞"
      );
    } finally {
      setIsLoading(false);
    }
  };

  const handleChange = (
    e: React.ChangeEvent<
      HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement
    >
  ) => {
    const { name, value } = e.target;
    setFormData((prev) => ({
      ...prev,
      [name]: name === "price" ? Number(value) : value,
    }));
  };

  const handleImageSelect = (file: File) => {
    console.log("Image selected:", file);
    setImageFile(file);
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤–∏–¥–µ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  const flatCategories = categoryService.getAllCategoriesFlat(categories);

  // –°–ø–∏—Å–æ–∫ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
  const unitsOfMeasure = [
    "—à—Ç",
    "–ø.–º.",
    "–º¬≤",
    "–º¬≥",
    "–∫–≥",
    "–ª",
    "—É–ø",
    "–∫–æ–º–ø–ª",
    "—Ä—É–ª",
    "–ø–∞–∫",
  ];

  if (productLoading) {
    return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (!selectedProduct) {
    return <div className={styles.error}>–¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω</div>;
  }

  return (
    <div className={styles.adminContainer}>
      <div className={styles.header}>
        <h2>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</h2>
      </div>

      <form onSubmit={handleSubmit} className={styles.form}>
        <div className={styles.formGroup}>
          <label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
          <textarea
            id="description"
            name="description"
            value={formData.description}
            onChange={handleChange}
            required
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="price">–¶–µ–Ω–∞</label>
          <input
            type="number"
            id="price"
            name="price"
            value={formData.price}
            onChange={handleChange}
            min="0"
            step="0.01"
            required
          />
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="unitOfMeasure">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
          <select
            id="unitOfMeasure"
            name="unitOfMeasure"
            value={formData.unitOfMeasure}
            onChange={handleChange}
            required
          >
            {unitsOfMeasure.map((unit) => (
              <option key={unit} value={unit}>
                {unit}
              </option>
            ))}
          </select>
        </div>

        <div className={styles.formGroup}>
          <label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
          <select
            id="category"
            name="category"
            value={formData.category as string}
            onChange={handleChange}
            required
          >
            <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
            {flatCategories.map((cat) => (
              <option
                key={cat.id}
                value={cat.id}
                style={{ paddingLeft: `${cat.level * 20}px` }}
              >
                {"\u00A0".repeat(cat.level * 2)}
                {cat.isParent ? "üìÅ " : "üìÑ "}
                {cat.name}
              </option>
            ))}
          </select>
        </div>

        <div className={styles.formGroup}>
          <label>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞</label>
          <ImageUpload
            onImageSelect={handleImageSelect}
            currentImage={imagePath}
            maxWidth={800}
            maxHeight={800}
            quality={0.75}
          />
        </div>

        {error && <div className={styles.error}>{error}</div>}

        <div className={styles.formActions}>
          <button
            type="button"
            onClick={() => navigate("/admin/products")}
            disabled={isLoading}
          >
            –û—Ç–º–µ–Ω–∞
          </button>
          <button type="submit" disabled={isLoading}>
            {isLoading ? "–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ..." : "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è"}
          </button>
        </div>
      </form>
    </div>
  );
};

export default ProductEdit;
