import React, { useState, useEffect } from "react";
import { useNavigate, useParams } from "react-router-dom";
import { useFormik } from "formik";
import * as Yup from "yup";
import { useAppDispatch, useAppSelector } from "../../../hooks";
import {
  createProduct,
  updateProduct,
  fetchProductById,
} from "../../../reducers";
import { ROUTES } from "../../../constants/routes";
import { CATEGORIES } from "../../../constants/categories";
import styles from "./Admin.module.css";
import SaveIcon from "@mui/icons-material/Save";
import CancelIcon from "@mui/icons-material/Cancel";
import { Product, ProductFormData, Category } from "../../../types";
import ImageUpload from "../../../components/ImageUpload/ImageUpload";
import { categoryService } from "../../../services/categoryService";

// –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è
const UNITS_OF_MEASURE = [
  { value: "—à—Ç", label: "–®—Ç—É–∫–∏" },
  { value: "–º¬≤", label: "–ö–≤–∞–¥—Ä–∞—Ç–Ω—ã–µ –º–µ—Ç—Ä—ã" },
  { value: "–º¬≥", label: "–ö—É–±–∏—á–µ—Å–∫–∏–µ –º–µ—Ç—Ä—ã" },
  { value: "–º", label: "–ú–µ—Ç—Ä—ã" },
  { value: "–∫–≥", label: "–ö–∏–ª–æ–≥—Ä–∞–º–º—ã" },
  { value: "—Ç", label: "–¢–æ–Ω–Ω—ã" },
  { value: "—É–ø", label: "–£–ø–∞–∫–æ–≤–∫–∞" },
  { value: "—Ä—É–ª", label: "–†—É–ª–æ–Ω" },
  { value: "–ª–∏—Å—Ç", label: "–õ–∏—Å—Ç" },
  { value: "–ø–∞–ª", label: "–ü–∞–ª–ª–µ—Ç–∞" },
  { value: "–∫–æ–º–ø–ª", label: "–ö–æ–º–ø–ª–µ–∫—Ç" },
];

interface ProductFormProps {
  product?: Product;
  categories: Category[];
  onSubmit: (values: ProductFormData) => Promise<void>;
  onCancel: () => void;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –¥–µ—Ä–µ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const buildCategoryTree = (categories: Category[]): Category[] => {
  const categoryMap = new Map<string, Category>();
  const rootCategories: Category[] = [];

  // –°–æ–∑–¥–∞–µ–º Map –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
  categories.forEach((category) => {
    categoryMap.set(category._id, { ...category, children: [] });
  });

  // –°—Ç—Ä–æ–∏–º –¥–µ—Ä–µ–≤–æ
  categories.forEach((category) => {
    const currentCategory = categoryMap.get(category._id);
    if (currentCategory) {
      if (category.parentId) {
        const parentCategory = categoryMap.get(category.parentId);
        if (parentCategory) {
          if (!parentCategory.children) {
            parentCategory.children = [];
          }
          parentCategory.children.push(currentCategory);
        }
      } else {
        rootCategories.push(currentCategory);
      }
    }
  });

  return rootCategories;
};

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
const CategoryOption: React.FC<{ category: Category; level: number }> = ({
  category,
  level,
}) => {
  const prefix = "\u00A0".repeat(level * 4);
  return (
    <>
      <option value={category._id}>
        {prefix}
        {category.name}
      </option>
      {category.children?.map((child) => (
        <CategoryOption key={child._id} category={child} level={level + 1} />
      ))}
    </>
  );
};

const ProductForm: React.FC<ProductFormProps> = ({
  product,
  categories,
  onSubmit,
  onCancel,
}) => {
  const navigate = useNavigate();
  const { id } = useParams();
  const dispatch = useAppDispatch();
  const {
    selectedProduct: productState,
    loading,
    error,
  } = useAppSelector((state) => state.products);

  const isEdit = id !== "create";

  const [imagePreview, setImagePreview] = useState<string | null>(
    product?.image || null
  );
  const [selectedFile, setSelectedFile] = useState<File | null>(null);

  const validationSchema = Yup.object({
    name: Yup.string().required("–ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
    description: Yup.string().required("–û–ø–∏—Å–∞–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
    price: Yup.number()
      .required("–¶–µ–Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞")
      .min(0, "–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π"),
    category: Yup.string().required("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"),
    image: Yup.mixed().required("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ"),
    unitOfMeasure: Yup.string().required("–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–∞"),
  });

  const formik = useFormik<ProductFormData>({
    initialValues: {
      name: product?.name || "",
      description: product?.description || "",
      price: product?.price || 0,
      category: getProductCategoryId(product),
      image: product?.image || "",
      unitOfMeasure: product?.unitOfMeasure || "",
    },
    validationSchema,
    onSubmit: async (values) => {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –æ–±—ä–µ–∫—Ç —Å File –≤–º–µ—Å—Ç–æ base64 —Å—Ç—Ä–æ–∫–∏
      const submitData = {
        ...values,
        image: selectedFile || values.image,
      };
      await onSubmit(submitData);
    },
  });

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ø—Ä–æ–¥—É–∫—Ç–∞
  function getProductCategoryId(product?: Product) {
    if (!product) return "";

    // –ï—Å–ª–∏ category - –æ–±—ä–µ–∫—Ç, –∏–∑–≤–ª–µ–∫–∞–µ–º _id
    if (typeof product.category === "object" && product.category !== null) {
      return (product.category as { _id: string })._id;
    }

    // –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å (—Å—Ç—Ä–æ–∫–∞)
    return product.category || "";
  }

  useEffect(() => {
    if (isEdit && id) {
      dispatch(fetchProductById(id));
    }
  }, [dispatch, isEdit, id]);

  const handleImageSelect = (file: File) => {
    setSelectedFile(file);
    const reader = new FileReader();
    reader.onloadend = () => {
      setImagePreview(reader.result as string);
      formik.setFieldValue("image", file);
    };
    reader.readAsDataURL(file);
  };

  // –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –≤–∏–¥–µ –ø–ª–æ—Å–∫–æ–≥–æ —Å–ø–∏—Å–∫–∞ —Å —É—Ä–æ–≤–Ω—è–º–∏ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏
  const flatCategories = categoryService.getAllCategoriesFlat(categories);

  if (loading) {
    return <div className={styles.loading}>–ó–∞–≥—Ä—É–∑–∫–∞...</div>;
  }

  if (error) {
    return <div className={styles.error}>{error}</div>;
  }

  return (
    <form onSubmit={formik.handleSubmit} className={styles.form}>
      <div className={styles.formGroup}>
        <label htmlFor="name">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
        <input
          id="name"
          name="name"
          type="text"
          onChange={formik.handleChange}
          value={formik.values.name}
          className={
            formik.touched.name && formik.errors.name ? styles.error : ""
          }
        />
        {formik.touched.name && formik.errors.name && (
          <div className={styles.errorMessage}>{formik.errors.name}</div>
        )}
      </div>

      <div className={styles.formGroup}>
        <label htmlFor="description">–û–ø–∏—Å–∞–Ω–∏–µ</label>
        <textarea
          id="description"
          name="description"
          onChange={formik.handleChange}
          value={formik.values.description}
          className={
            formik.touched.description && formik.errors.description
              ? styles.error
              : ""
          }
        />
        {formik.touched.description && formik.errors.description && (
          <div className={styles.errorMessage}>{formik.errors.description}</div>
        )}
      </div>

      <div className={styles.formGroup}>
        <label htmlFor="price">–¶–µ–Ω–∞</label>
        <input
          id="price"
          name="price"
          type="number"
          onChange={formik.handleChange}
          value={formik.values.price}
          className={
            formik.touched.price && formik.errors.price ? styles.error : ""
          }
        />
        {formik.touched.price && formik.errors.price && (
          <div className={styles.errorMessage}>{formik.errors.price}</div>
        )}
      </div>

      <div className={styles.formGroup}>
        <label htmlFor="category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
        <select
          id="category"
          name="category"
          onChange={formik.handleChange}
          value={formik.values.category as string}
          className={
            formik.touched.category && formik.errors.category
              ? styles.error
              : ""
          }
        >
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é</option>
          {flatCategories.map((cat) => (
            <option
              key={cat.id}
              value={cat.id}
              style={{ paddingLeft: `${cat.level * 20}px` }}
            >
              {"\u00A0".repeat(cat.level * 2)}
              {cat.isParent ? "üìÅ " : "üìÑ "}
              {cat.name}
            </option>
          ))}
        </select>
        {formik.touched.category && formik.errors.category && (
          <div className={styles.errorMessage}>{formik.errors.category}</div>
        )}
      </div>

      <div className={styles.formGroup}>
        <label htmlFor="unitOfMeasure">–ï–¥–∏–Ω–∏—Ü–∞ –∏–∑–º–µ—Ä–µ–Ω–∏—è</label>
        <select
          id="unitOfMeasure"
          name="unitOfMeasure"
          onChange={formik.handleChange}
          value={formik.values.unitOfMeasure}
          className={
            formik.touched.unitOfMeasure && formik.errors.unitOfMeasure
              ? styles.error
              : ""
          }
        >
          <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –µ–¥–∏–Ω–∏—Ü—É –∏–∑–º–µ—Ä–µ–Ω–∏—è</option>
          {UNITS_OF_MEASURE.map((unit) => (
            <option key={unit.value} value={unit.value}>
              {unit.label}
            </option>
          ))}
        </select>
        {formik.touched.unitOfMeasure && formik.errors.unitOfMeasure && (
          <div className={styles.errorMessage}>
            {formik.errors.unitOfMeasure}
          </div>
        )}
      </div>

      <div className={`${styles.formGroup} ${styles.fullWidth}`}>
        <label htmlFor="image">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ</label>
        <ImageUpload
          onImageSelect={handleImageSelect}
          currentImage={product?.image}
        />
        {formik.touched.image && formik.errors.image && (
          <div className={styles.errorMessage}>{formik.errors.image}</div>
        )}
      </div>

      <div className={`${styles.formActions} ${styles.fullWidth}`}>
        <button
          type="button"
          className={styles.cancelButton}
          onClick={onCancel}
        >
          <CancelIcon fontSize="small" className={styles.buttonIcon} />
          –û—Ç–º–µ–Ω–∞
        </button>
        <button type="submit" className={styles.submitButton}>
          <SaveIcon fontSize="small" className={styles.buttonIcon} />
          {product ? "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å" : "–î–æ–±–∞–≤–∏—Ç—å"}
        </button>
      </div>
    </form>
  );
};

export default ProductForm;
